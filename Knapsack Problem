#include <iostream>
#include <vector>

using namespace std;

int knapsack(int W, const vector<int>& weights, const vector<int>& values) {
  int n = weights.size();
  vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= W; j++) {
      if (weights[i - 1] <= j)
        dp[i][j] = max(values[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
      else
        dp[i][j] = dp[i - 1][j];
    }
  }

  return dp[n][W];
}

int main() {
  int n, W;
  cout << "Enter the number of items: ";
  cin >> n;

  vector<int> weights(n);
  vector<int> values(n);

  cout << "Enter the weights of the items:\n";
  for (int i = 0; i < n; i++)
    cin >> weights[i];

  cout << "Enter the values of the items:\n";
  for (int i = 0; i < n; i++)
    cin >> values[i];

  cout << "Enter the maximum weight capacity: ";
  cin >> W;

  int maxVal = knapsack(W, weights, values);
  cout << "Maximum value achievable: " << maxVal << endl;

  return 0;
}
