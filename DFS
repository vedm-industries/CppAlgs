#include <iostream>
#include <vector>
#include <stack>

using namespace std;

void dfs(vector<vector<int>>& graph, int start) {
  int V = graph.size();
  vector<bool> visited(V, false);
  stack<int> st;

  st.push(start);

  while (!st.empty()) {
    int vertex = st.top();
    st.pop();

    if (!visited[vertex]) {
      cout << vertex << " ";
      visited[vertex] = true;
    }

    for (int neighbor : graph[vertex]) {
      if (!visited[neighbor])
        st.push(neighbor);
    }
  }
}

int main() {
  int V, E;
  cout << "Enter the number of vertices: ";
  cin >> V;
  cout << "Enter the number of edges: ";
  cin >> E;

  vector<vector<int>> graph(V);

  cout << "Enter the edges (source, destination):\n";
  for (int i = 0; i < E; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    // graph[v].push_back(u); // For undirected graphs
  }

  int start;
  cout << "Enter the starting vertex: ";
  cin >> start;

  cout << "Depth-First Search traversal: ";
  dfs(graph, start);

  return 0;
}
